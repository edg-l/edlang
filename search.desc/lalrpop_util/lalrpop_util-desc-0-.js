searchState.loadedDescShard("lalrpop_util", 0, "Generated by the parser when it encounters additional, …\nGenerated by the parser when it encounters a token (or …\nGenerated by the parser when it encounters an EOF it did …\nGenerated by the parser when it encounters a token it did …\nCustom error type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefine a module using the generated parse from a <code>.lalrpop</code> …\nThe set of expected tokens: these names are taken from the …\nThe set of expected tokens: these names are taken from the …\nThe end of the final token\nThe unexpected token of type <code>T</code> with a span given by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIdentifies an action.\nContains the error value\nRepresents a “user error” – this can get produced by …\nGenerated by the parser when it encounters additional, …\nGenerated by the parser when it encounters a token (or …\nRepresents a location in the input text. If you are using …\nIdentifies a nonterminal.\nContains the success value\nIdentifies a reduction.\nIdentifies a state. Typically an i8, i16, or i32 …\nType produced by reducing the start symbol.\nThe type representing things on the LALRPOP stack. …\nThe type emitted by the user’s tokenizer (excluding the …\nWe assign a unique index to each token in the grammar, …\nGenerated by the parser when it encounters an EOF it did …\nGenerated by the parser when it encounters a token it did …\nCustom error type.\nGiven the top-most state and the pending terminal, returns …\nAction to take if EOF occurs in the given state. This …\nReturns the action to take if an error occurs in the given …\nGiven error information, creates an error recovery symbol …\nReturns the expected tokens in a given state. This is used …\nReturns the expected tokens in a given state. This is used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf we reduce to a nonterminal in the given state, what …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecute a reduction in the given state: that is, execute …\nReturns information about how many states will be popped …\nReturns a location representing the “start of the input…\nReturns the initial state.\nConverts the user’s tokens into an internal index; this …\n“Upcast” a terminal into a symbol so we can push it …\nTrue if this grammar supports error recovery.\nThe set of expected tokens: these names are taken from the …\nThe set of expected tokens: these names are taken from the …\nThe end of the final token\nThe unexpected token of type <code>T</code> with a span given by the …")